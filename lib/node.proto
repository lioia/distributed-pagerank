syntax = "proto3";

option go_package = "github.com/lioia/distributed-pagerank/lib";

package lib;

service MasterNode {
  // TODO: messages should contains state update
  rpc HealthCheck(Empty) returns (Empty) {}
  rpc ProcessNewNode(ConnectionInfo) returns (Info) {}
  rpc ProcessGraph(GraphUpload) returns (Ranks) {}
}

service Layer1Node {
  // TODO: messages should contains state update
  rpc HealthCheck(Empty) returns (Empty) {}
  rpc Announce(AnnounceMessage) returns (Empty) {}
  rpc ReceiveGraph(SubGraph) returns (Empty) {}
}

service Layer2Node {
  // TODO: messages should contains state update
  rpc HealthCheck(Empty) returns (Empty) {}
  rpc ComputeMap(SubGraph) returns (MapContributions) {}
  rpc ComputeReduce(Sum) returns (Rank) {}
}

message Empty {}

message ConnectionInfo {
  string address = 1;
  int32 port = 2;
}

message Info {
  int32 layerNumber = 1;
  // Layer 1 info
  repeated ConnectionInfo layer1s = 2; // Layer 1 nodes
  // Layer 2 info
  optional ConnectionInfo assigned = 3; // Assigned Layer 1 Node
}

message AnnounceMessage {
  ConnectionInfo connection = 1; // Join node connection info
  int32 layerNumber = 2;         // Join node layer number
}

message GraphUpload {
  ConnectionInfo from = 1; // Client connection info
  bytes contents = 2;      // Graph File contents
}

message Rank {
  int32 ID = 1;    // Graph Node ID
  double rank = 2; // Graph Node Rank
}

message Ranks { repeated Rank Ranks = 1; }

message SubGraph {
  map<int32, GraphNode> Graph = 1; // Graph structure
}

message GraphNode {
  int32 ID = 1;                       // Node ID
  map<int32, GraphNode> OutLinks = 2; // Nodes this node points to
  double Rank = 3;                    // Current PageRank
  double EValue = 4;                  // E probability vector for this node
}

message MapContributions {
  map<int32, double> Contribution = 1; // Map Contribution
}

message Sum {
  GraphNode Node = 1;
  double Sum = 2;
  double DampingFactor = 3;
}
