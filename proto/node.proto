syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

import "proto/common.proto";

option go_package = "github.com/lioia/distributed-pagerank/proto";

package proto;

// Internal Node communication
service Node {
  // Worker to Master: check whether the master node is still running
  rpc HealthCheck(google.protobuf.StringValue) returns (Health) {}
  // Master to Worker: send master state to workers (consistency)
  rpc StateUpdate(State) returns (google.protobuf.Empty) {}
  // Master to Worker: send connected nodes to worker
  rpc OtherStateUpdate(OtherState) returns (google.protobuf.Empty) {}
  // Worker to Master: new node asks to join the network
  rpc NodeJoin(google.protobuf.StringValue) returns (Join) {}
  // Worker to Worker: announces its candidacy as new master
  // Returns true if the worker node has accepted it
  rpc MasterCandidate(Candidacy) returns (google.protobuf.BoolValue) {}
}

message Health {
  oneof value {
    // Worker was not known to the master (missed last state update)
    State state = 1;
    // Worker was known to master (already up to date)
    google.protobuf.Empty empty = 2;
  }
}

message State {
  int32 phase = 1;                 // Current Node Phase
  map<int32, GraphNode> graph = 2; // Graph
  double c = 3;                    // PageRank Parameter
  double threshold = 4;            // PageRank Parameter
  repeated string others = 5;      // Other nodes
}

message OtherState {
  repeated string connections = 1; // Other nodes in the network
}

message GraphNode {
  double rank = 1;                       // Current PageRank
  double e = 2;                          // E probability vector for this node
  map<int32, GraphNodeInfo> inLinks = 3; // Incoming nodes
}

message Join {
  string workQueue = 1;   // Work queue name
  string resultQueue = 2; // Result queue name
  State state = 3;        // Master node state
}

message Candidacy {
  string connection = 1; // Candidate connection information
  int64 timestamp = 2;   // Used as an ID
}
