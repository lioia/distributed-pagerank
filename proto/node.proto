syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/lioia/distributed-pagerank/proto";

package proto;

// Internal Node communication
service Node {
  // Worker to Master: check whether the master node is still running
  rpc HealthCheck(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // Master to Worker: send master state to workers (consistency)
  rpc StateUpdate(State) returns (google.protobuf.Empty) {}
  // Worker to Master: new node asks to join the network
  rpc NodeJoin(google.protobuf.StringValue) returns (Join) {}
  // Worker to Worker: announces its candidacy as new master (after its failure)
  rpc MasterCandidate(Candidacy) returns (Ack) {}
}

message State {
  int32 phase = 1;                 // Current Node Phase
  map<int32, GraphNode> graph = 2; // Graph to be computed
  int32 jobs = 4;                  // Number of jobs added to the queue
  map<int32, double> data = 5;     // Collected data from map or reduce phase
  double c = 6;                    // PageRank Parameter
  double threshold = 7;            // PageRank Parameter
  repeated string others = 8;      // Other nodes in the network
}

message GraphNode {
  int32 id = 1;                // Node ID
  double rank = 3;             // Current PageRank
  double eValue = 4;           // E probability vector for this node
  repeated int32 outLinks = 2; // Node IDs this node points to
}

message Join {
  string workQueue = 1;   // Work queue name
  string resultQueue = 2; // Result queue name
  double c = 3;           // PageRank parameter
  double threshold = 4;   // PageRank parameter
  State state = 5;        // Master node state
}

message Candidacy {
  string connection = 1; // Candidate connection information
  int64 timestamp = 2;   // Used as an ID
}

message Ack {
  bool ack = 1;         // Candidate recognized as new master
  string candidate = 2; // ACK = false -> candidate: new master info
}
