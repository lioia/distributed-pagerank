syntax = "proto3";

import "google/protobuf/empty.proto";

option go_package = "github.com/lioia/distributed-pagerank/proto";

package proto;

service Node {
  rpc HealthCheck(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc StateUpdate(State) returns (google.protobuf.Empty) {}
  rpc NodeJoin(google.protobuf.Empty) returns (Join) {}
  rpc UploadGraph(GraphUpload) returns (Graph) {}
  rpc MasterCandidate(Candidacy) returns (Ack) {}
}

service Api {
  rpc SendGraph(Graph) returns (google.protobuf.Empty) {}
}

message State {
  int32 phase = 1;             // Current Node Phase
  Graph graph = 2;             // Graph to be computed
  string client = 3;           // Client that requested the computation
  int32 jobs = 4;              // Number of jobs added to the queue
  map<int32, double> data = 5; // Collected data from map or reduce phase
  repeated string others = 6;  // Other nodes in the network
}

message Join {
  string workQueue = 1;
  string resultQueue = 2;
  double c = 3;
  double threshold = 4;
  State state = 5;
}

message GraphUpload {
  string from = 1;
  bytes contents = 2;
}

message MapIntDouble { map<int32, double> map = 1; }

message Graph { map<int32, GraphNode> graph = 1; }

message GraphNode {
  int32 id = 1;                // Node ID
  double rank = 3;             // Current PageRank
  double eValue = 4;           // E probability vector for this node
  repeated int32 outLinks = 2; // Node IDs this node points to
}

message Job {
  int32 type = 1; // 0: Map job; 1: Reduce job
  map<int32, GraphNode> mapData = 2;
  Reduce reduceData = 3;
}

message Reduce {
  repeated GraphNode nodes = 1;
  map<int32, double> sums = 2;
}

message Candidacy {
  string connection = 1;
  int64 timestamp = 2;
}

message Ack {
  bool ack = 1;         // Candidate recognized as new master
  string candidate = 2; // ACK = false -> candidate: new master info
}
